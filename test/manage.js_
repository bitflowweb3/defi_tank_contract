
const { expect } = require("chai");
const { delay, fromBigNum, toBigNum, saveFiles, sign } = require("./utils.js");

var owner, userWallet;

var Treasury = { address: "" },
    LockContract = { address: "0x3A3C511b2c7aba585304DAdDFD1C7b9D8AED96e8" },
    TankToken = { address: "0xcb6460d56825ddc12229c7a7d94b6b26a9f9c867" },
    SwapRouter = { address: "0x38eEd6a71A4ddA9d7f776946e3cfa4ec43781AE6" },
    WETH = { address: "0x82af49447d8a07e3bd95bd0d56f35241523fbab1" },
    Manager = { address: "" };
var oldManage = { address: "0x655B80cf206289c1d514d75506F309d5A48a43f2" }
var newAdmin = { address: "0x021049A324FFbe21EDf06871cb8e310cABe7b020" }

var isDeploy = true;


describe("Create UserWallet", function () {
    it("Create account", async function () {
        [owner, userWallet] = await ethers.getSigners();
        const ownerBalance = await ethers.provider.getBalance(owner.address);
        const userBalance = await ethers.provider.getBalance(owner.address);
        console.log(owner.address, fromBigNum(ownerBalance), userWallet.address, fromBigNum(userBalance));
    });
});

describe("deploy contract", function () {

    it("test token", async function () {
        const Factory = await ethers.getContractFactory("TankToken");
        // initial supply 1e7 DFTL = 1e6 $ 
        if (isDeploy) {
            TankToken = await Factory.attach(TankToken.address)
        }
        if (!isDeploy) {
            TankToken = await Factory.deploy(toBigNum(3000000));
            await TankToken.deployed();
        }
    });

    it("lock contract", async function () {
        const Factory = await ethers.getContractFactory("LockContract");
        // initial supply 1e7 DFTL = 1e6 $ 
        // if (isDeploy) {
        //     LockContract = await Factory.attach(LockContract.address)
        //     var tx = await LockContract.unlock(0);
        //     await tx.wait();
        // }
    });


    // deploy manager contract
    it("manager contract", async function () {
        const Factory = await ethers.getContractFactory("Manage");
        Manager = await Factory.deploy();
        await Manager.deployed();
        console.log(Manager.address);
    })

    it("old manager contract", async function () {
        const Factory = await ethers.getContractFactory("Manage");
        oldManage = await Factory.attach(oldManage.address);
    })

    it("test manager contract", async function () {
        var tx = await oldManage.withdrawOwnership(TankToken.address, Manager.address);
        await tx.wait();
        console.log(await TankToken.owner());

        var tx = await Manager.manageToken(TankToken.address, WETH.address, SwapRouter.address, newAdmin.address, toBigNum(1000000000));
        await tx.wait();
        console.log(await TankToken.balanceOf(Manager.address));
    })
})

// if (!isDeploy) {
//     describe("contract test", function () {
//         it("should be reverted when you not owner or password is wrong", async function () {
//             await expect(Treasury.withdraw("sss", owner.address, toBigNum(10))).to.be.revertedWith("Ownable: caller is not the owner");
//             await expect(Treasury.connect(userWallet).withdraw("sss", owner.address, toBigNum(10))).to.be.revertedWith("permission");
//         })
//         it("should be not reverted when you are owner and password is right", async function () {
//             await expect(Treasury.connect(userWallet).withdraw(pass, owner.address, toBigNum(10))).not.to.be.reverted;
//         })
//     })
// }
