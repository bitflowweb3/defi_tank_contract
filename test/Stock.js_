
const { expect } = require("chai");
const { fromBigNum, toBigNum, saveFiles } = require("./utils.js");

var owner, userWallet;
var Stock;
var isDeploy = true;

describe("Create UserWallet", function () {
    it("Create account", async function () {
        [owner, userWallet] = await ethers.getSigners();
        const ownerBalance = await ethers.provider.getBalance(owner.address);
        const userBalance = await ethers.provider.getBalance(owner.address);
        console.log(owner.address, fromBigNum(ownerBalance), userWallet.address, fromBigNum(userBalance));
    });
});

describe("deploy contract", function () {
    it("FounderNFT contract", async function () {
        const Factory = await ethers.getContractFactory("Stock");
        Stock = await Factory.deploy(
            "DeFiTankStock",
            "DFTS",
            "http://localhost:5000/api/tank"
        );
        await Stock.deployed();
        console.log(Stock.address);
    })
})

if (!isDeploy)
    describe("test contract", function () {
        it("shold be able to mint with proper cost", async function () {
            await expect(Stock.mints("5", { value: toBigNum("1.5") })).not.to.be.reverted;
            await expect(Stock.mints("5", { value: toBigNum("1.4") })).to.be.revertedWith("Invalid price");
        })
        it("shold be able to withdraw eth for owner", async function () {
            await expect(async () => { return await Stock.withDrawETH(toBigNum("1.5"), owner.address) }).changeEtherBalance(owner, toBigNum("1.5"));
            await expect(Stock.connect(userWallet).withDrawETH(toBigNum("1.5"), owner.address)).to.be.revertedWith("Ownable: caller is not the owner");
        })

        it("resttime shold be more than 6 days ", async function () {
            let restTime = await Stock.getRestTime();
            console.log(String(restTime));
        })

        it("trace call testing", async function () {

        })
    })

if (isDeploy)
    describe("Save contracts", function () {
        it("save abis", async function () {
            const abis = {
                Stock: artifacts.readArtifactSync("Stock").abi
            };
            await saveFiles("stock-abis.json", JSON.stringify(abis, undefined, 4));
        });
        it("save addresses", async function () {
            const addresses = {
                Stock: Stock.address
            };
            await saveFiles(
                "stock-addresses.json",
                JSON.stringify(addresses, undefined, 4)
            );
        });
    });